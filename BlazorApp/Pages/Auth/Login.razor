@page "/Login"

<AuthorizeView>
    <Authorized>
        @{ NavigationManager.NavigateTo("/"); }
    </Authorized>
    <NotAuthorized>
    <div class="mx-auto rounded border p-4" style="width: 400px; margin: 60px;">
        <h3 class="text-center mb-3">Login</h3>
        <hr>
    
        @if (_error.Length > 0)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>@_error</strong>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div> 
        }
        <div class="mb-3">
            <label class="form-label">Email</label>
            <input class="form-control" @bind="_email"/>
        </div>
 
        <div class="mb-3">
            <label class="form-label">Password</label>
            <input class="form-control" type="password" @bind="_password"/>
        </div>
        <div class="row">
            <div class="col d-grid">
                <button class="btn btn-primary" @onclick="LoginAsync">Log In</button>
            </div>
            <div class="col d-grid">
                <a class="btn btn-outline-primary" href="/" role="button">
                    Cancelar
                </a>
            </div>
        </div>
    
    </div>
    </NotAuthorized>
</AuthorizeView>

@inject AuthenticationStateProvider Provider
@inject NavigationManager NavigationManager

@code {
 string _email  = string.Empty;
 string _password  = string.Empty;
 string _error = string.Empty;

 private async Task LoginAsync()
 {
     var authStateProvider = (CustomAuthStateProvider)Provider;
     var formResult = await authStateProvider.LoginAsync(_email, _password);
     if (formResult.Succeeded)
     {
         NavigationManager.NavigateTo("/");
     }
     else
     {
         _error = formResult.Errors[0];
     }
 }
}